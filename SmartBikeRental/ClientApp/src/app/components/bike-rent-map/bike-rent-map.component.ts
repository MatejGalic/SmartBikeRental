import { Component, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import * as L from 'leaflet';
import { Subject, filter, merge, take, takeUntil } from 'rxjs';
import { DeviceDto } from 'src/app/core/models/autogenerated/dtos/deviceDto';
import { BikeRentService } from 'src/app/core/services/bike-rent.service';
import { SignalRService } from 'src/app/core/services/signal-r.service';

@Component({
  selector: 'app-bike-rent-map',
  templateUrl: './bike-rent-map.component.html',
  styleUrls: ['./bike-rent-map.component.scss'],
})
export class BikeRentMapComponent implements OnInit, OnDestroy {
  private readonly LAT_DEFAULT = 45.8153;
  private readonly LNG_DEFAULT = 15.9665;
  private map: L.Map;
  private popups: L.Popup[] = [];
  private destroy$: Subject<void> = new Subject<void>();

  constructor(
    private signalR: SignalRService,
    private bikeService: BikeRentService,
    private renderer: Renderer2
  ) {}

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  ngOnInit(): void {
    this.signalR.devices$
      .pipe(takeUntil(this.destroy$))
      .subscribe((devices) => {
        // update device info in popup
        this.updatePopups(devices);
      });
  }

  public onMapReady(map: L.Map) {
    this.map = map;

    // set initial device data on map
    merge(this.bikeService.getDevices(), this.signalR.devices$)
      .pipe(
        filter((e) => !!e && e.length != 0),
        take(1)
      )
      .subscribe((ds) => {
        ds.forEach((t) => {
          const p = L.popup({
            closeButton: false,
            autoClose: false,
            closeOnClick: false,
            closeOnEscapeKey: false,
          })
            .setLatLng([this.LAT_DEFAULT + 1, this.LNG_DEFAULT + 1])
            .setContent('loading data')
            .addTo(this.map)
            .openPopup();

          this.popups.push(p);
        });

        this.updatePopups(ds);
      });
  }

  private updatePopups(devices: DeviceDto[]) {
    this.popups.forEach((p, i) => {
      const device = devices[i];

      let pHtmlEl = p.getElement();
      let pContainerEl = pHtmlEl.children[0];
      let pPointerEl = pHtmlEl.children[1].children[0];

      [pContainerEl, pPointerEl].forEach((el) => {
        const unlockedClass = '!bg-green-300';
        const lockedClass = '!bg-red-400';

        this.renderer.removeClass(el, lockedClass);
        this.renderer.removeClass(el, unlockedClass);

        !device.bikeRentalLED
          ? this.renderer.addClass(el, lockedClass)
          : this.renderer.addClass(el, unlockedClass);
      });
      //  Status: <span style="font-weight: 600">${!device.bikeRentalLED ? 'Taken' : 'Available'} </span>
      p.setContent(`
      <h1 class="text-sm font-semibold">${device.deviceName}</h1>
      <img class="w-9 h-9 mx-auto" src="assets/images/icons/${
        !device.bikeRentalLED ? 'locked' : 'unlocked'
      }-grey.svg" />
       `);

      p.setLatLng([device.bikeRentalLatitude, device.bikeRentalLongitude]);
    });
  }

  public options: L.MapOptions = {
    layers: [
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 18,
        minZoom: 1,
        attribution:
          'Map data Â© <a href="http://openstreetmap.org">OpenStreetMap</a> contributors',
      }),
    ],
    zoom: 15,
    center: L.latLng(this.LAT_DEFAULT, this.LNG_DEFAULT),
  };
}
